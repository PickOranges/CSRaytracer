#pragma kernel CSMain

RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;

// To make the sampling uv is either itself, or one of the 8 neighbors of it.
// This is used for Anti-Aliasing.
// You'll see the edge is keep jittering.
float2 _PixelOffset;  
float _SphereOffsetX;
int _NumSpheres;

float4 _DirectionalLight;

struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
};

struct Ray
{
    //float4 origin;
    //float4 direction;
    float3 origin;
    float3 direction;
    float3 energy; // For ray bouncing.
};

//Ray CreateRay(float4 origin, float4 direction)
Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin=origin;
    ray.direction=direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    //float4 origin=float4(0.0f, 0.0f, 0.0f, 0.1f);
    //float4 end_point=mul(_CameraInverseProjection, float4(uv, 0, 0.1f));
    //end_point=mul(_CameraToWorld, end_point);
    //float4 direction=normalize(end_point-float4(0.0f,0.0f,0.0f,1.0f));

    float3 origin=mul(_CameraToWorld, float4(0,0,0,1.0f)).xyz;
    float3 direction=mul(_CameraInverseProjection, float4(uv, 0, 0.1f)).xyz;
    direction=mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction=normalize(direction);
    return CreateRay(origin, direction);
}

struct RayHit
{
    float3 position;  // float4(0,0,0,1), be careful when doing matrix multiplication.
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);  // what is this normal? i.e. normal of the hit surface
    hit.albedo=float3(0.0f, 0.0f, 0.0f);  
    hit.specular=float3(0.0f, 0.0f, 0.0f);  
    return hit;
}


void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    // Assumption: the given ground is parallel to {world} XOZ plane, 
    // and thus the equation of this plane is y=0, w.r.t. {world} frame.

    // Calculate distance along the ray where the ground plane is intersected
    // Explain: suppose the hit point is p, thus p=(xp, 0, zp),
    // We can write equation: p=r(t)=o+d*t (i.e. point is on the ray).
    // And we only have one unknown to calculate, that is t,
    // Thus we use the equation: 0=o.y + d.y*t, thus d.y * t = -o.y.
    // Thus t=... as following.
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
    }

}

void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere) // sphere has float3 origin and float radius, thus stored in a float4
{
    float3 oc=ray.origin-sphere.xyz;
    float a=dot(ray.direction,ray.direction);
    float b=2.0*dot(oc,ray.direction);
    float c=dot(oc,oc)-sphere.w*sphere.w;
    float discriminant=b*b-4*a*c;
    if(discriminant<0) return;
    
    float t=(-b-sqrt(discriminant))/(2.0*a);
    bestHit.position=ray.origin+t*ray.direction;
    bestHit.normal=normalize(bestHit.position-sphere.xyz);
    float3 d=normalize(bestHit.position-ray.origin);
    
    bestHit.distance=sqrt(dot(d,d));
}


RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();

    // Trace ground plane
    IntersectGroundPlane(ray, bestHit);

    // Try to check every spheres in the scene, find the nearest hit point.
    uint numSpheres = _NumSpheres;
    float off=_SphereOffsetX;
    for (uint i = 0; i < numSpheres; i++)
    {
        IntersectSphere(ray, bestHit, float4(i*25+off, 0.0f, 400.0, 10.0));
    }
        
    return bestHit;
}

// not finished yet
float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        float3 specular = float3(0.125f,0.125f,0.125f);

        // Reflect the ray and multiply energy with specular reflection
        // the reflected ray's origin. But why the small displacement ???
        // - Notice that we add a slight offset to the normal direction. 
        // - This is to fix floating point inaccuracy, as it is possible for a reflected ray to be blocked by the surface it is being reflected by.
        ray.origin = hit.position + hit.normal * 0.001f;    
        ray.direction = reflect(ray.direction, hit.normal);  // This function is from DX11/HLSL, details see MSDN.
        ray.energy*=specular;


        // Shadow test ray
        bool shadow = false;
        Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
        RayHit shadowHit = Trace(shadowRay);
        if (shadowHit.distance != 1.#INF) // the traced ray is blocked by something.
        {
            return float3(0.02f, 0.02f, 0.02f)*saturate(dot(hit.normal, -_DirectionalLight.xyz)) * _DirectionalLight.w * hit.normal;
        }


        // TODO: replace normal with albedo later
        return saturate(dot(hit.normal, -_DirectionalLight.xyz)) * _DirectionalLight.w * hit.normal;  
    }
    else
    {
        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;

        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);

    // Transform pixel to [-1,1] range i.e. into clip space
    float2 uv = (float2(((id.xy + float2(0.5, 0.5)) / float2(width, height)) * 2.0f - 1.0f))*2+1;
    

    // ray cast
    Ray ray = CreateCameraRay(uv);

    float3 result = float3(0, 0, 0);
    for (int i = 0; i < 8; i++)
    {
        RayHit hit = Trace(ray);

        result += ray.energy * Shade(ray, hit);

        if (!any(ray.energy)) break;
    }

    result=saturate(result);
    Result[id.xy] = float4(result, 1);
}
 

/*
    Questions:
    1. uv why not [0,1]? 
        - Because here we don't use uv to sample a texture, instead we use uv to generate rays.
        - But later when we calculate theta and phi, they are both in [0,1].
    2. skybox range why? [-2,0]? [-0.5, 0.5]? 
        - No! Both are in the range [0,1].


    01.25.2024
    1. Why the abnormal distortion?
    2. Why the spheres are black?
    3. Add some elements to all of the structs, see the next chapter Material.
    4. Do the peter shirly if you got some time. Do all three tutorials.

    01.26.2024
    1. specular * diffuse * light_color ? Why not diffuse + specular? Is this the correct phong-shading or NOT?
    2. AA seems be NOT correct, how to implement it?
*/

/*
    NOTES:
    1. clip space-->NDC space: (clip.xy*0.5 + clip.w*0.5) / (0.5*clip.w)
    2. C# script Matrix4X4 col-major(i.e. store each row into column), shader float4X4 row-major(i.e. as usual matrix).
    3. Don't remove the comment code, because they could be correct.
*/